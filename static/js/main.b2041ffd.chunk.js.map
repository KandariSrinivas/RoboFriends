{"version":3,"sources":["logo.svg","Components/search/Search.js","Components/card/Card.js","Components/cardlist/Cardlist.js","Components/scroll/Scroll.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Search","_ref","handleChange","react_default","a","createElement","className","style","padding","type","onChange","width","placeholder","onClick","id","Card","name","email","phone","website","src","concat","alt","href","Cardlist","data","display","flexDirection","flexWrap","justifyContent","map","user","Components_card_Card","key","Scroll","children","overflow","border","height","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","event","console","log","target","value","setState","filtered","state","users","filter","toLowerCase","includes","filteredUsers","_this2","fetch","then","json","length","search_Search","scroll_Scroll","cardlist_Cardlist","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b2041ffd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './search.css';\r\n\r\nfunction Search({handleChange}) {\r\n\r\n    return (\r\n        <div className='main'>\r\n            <h1 className ='font-weight-bold' style ={{padding:'15px'}}> ROBOFRIENDS</h1>\r\n    <div className=\"input-group mb-3 comp\">\r\n        <input type=\"text\" onChange={handleChange} style={{width: '20px'}} className=\"form-control\" placeholder=\"Search for your ROBOFRIEND\" />\r\n        <div className =\"input-group-append\">\r\n            <button className =\"btn btn-outline-secondary\" onClick={handleChange} type=\"button\" id=\"button-addon2\">Search</button>\r\n        </div>\r\n    </div>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Search;\r\n","import React from 'react';\r\nimport \"./Card.css\";\r\nvar Card = ({ name, email, phone, website }) => (\r\n    <div className=\"card\" style={{width: \"18rem\",}}>\r\n        <img src= {`https://robohash.org/${name}`} className=\"card-img-top\" alt={name} />\r\n        <div className=\"card-body\">\r\n            <h5 className=\"card-title\"> {name} </h5>\r\n            <p className=\"card-text\">Email: {email} <br/> Phone: {phone}</p>\r\n            <a href={website} className=\"btn btn-primary\">Visit Site</a>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from '../card/Card';\r\n\r\nfunction Cardlist({ data }) {\r\n    // let cards = data.map(user => <Card name= {user.name} website = {user.website} phone = {user.phone} /> );\r\n    return (\r\n        <div style={{display:'flex', flexDirection: 'row', flexWrap: 'wrap', justifyContent:'center',}}> \r\n            {data.map(user => <Card key = {user.id} name= {user.name} email={user.email} website = {user.website} phone = {user.phone} /> )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cardlist;","import React from 'react';\r\n\r\nvar Scroll = ({children}) => <div style={{overflow: 'auto', border: '5px solid black', height: '500px'}}> {children} </div>\r\n\r\nexport default Scroll;\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Search from './Components/search/Search';\nimport Cardlist from './Components/cardlist/Cardlist';\nimport Scroll from './Components/scroll/Scroll';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            Search: '',\n            users: [],\n            filteredUsers: []\n        }\n    }\n\n    handleChange = (event) => {\n        console.log(event.target.value);\n        this.setState({Search: event.target.value}, () => {\n            let filtered = this.state.users.filter(user => user.name.toLowerCase().includes(this.state.Search));\n            console.log(filtered);\n            this.setState({filteredUsers: filtered});\n        });\n     \n    }\n\n    componentDidMount() {\n        fetch(\"https://jsonplaceholder.typicode.com/users\").then(data => data.json()).then(data => this.setState({users: data, filteredUsers: data}));\n    }\n\n    render() {\n        let filteredUsers = this.state.filteredUsers;\n        return !this.state.users.length ? (<div> LOADING... </div>) :\n         (  \n            <div className=\"App\" >\n                <Search key='key' handleChange = {this.handleChange} />\n                <Scroll>\n                <Cardlist data = {filteredUsers} />\n                </Scroll>\n                \n            <h1> {this.state.Search} </h1>\n            </div>\n            \n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}